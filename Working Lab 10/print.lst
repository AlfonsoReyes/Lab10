


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000 00000000 
                       num     EQU              0
   13 00000000         
   14 00000000         
   15 00000000                 IMPORT           ST7735_OutChar
   16 00000000                 IMPORT           ST7735_OutString
   17 00000000                 EXPORT           LCD_OutDec
   18 00000000                 EXPORT           LCD_OutFix
   19 00000000         
   20 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   21 00000000                 PRESERVE8
   22 00000000                 THUMB
   23 00000000         
   24 00000000         
   25 00000000         
   26 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   27 00000000         ; Output a 32-bit number in unsigned decimal format
   28 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   29 00000000         ; Output: none
   30 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   31 00000000         LCD_OutDec
   32 00000000 E92D 41F0       PUSH             {R4,R5,R6,R7,R8,LR}
   33 00000004         
   34 00000004 250A            MOVS             R5,#10
   35 00000006 B08A            SUB              SP,SP,#40   ;allocate space for
                                                             10 values on stack
                                                            
   36 00000008         
   37 00000008 F04F 0600       MOV              R6,#0
   38 0000000C 9600            STR              R6,[SP,#num] ;num = 0
   39 0000000E F04F 0300       MOV              R3,#0x00
   40 00000012         
   41 00000012         ;loop1
   42 00000012         ;divide input by 10 and store remainder in stack every i
                       teration of loop1
   43 00000012         loop1
   44 00000012         ;LDR R3,[SP,#num] R3 = n
   45 00000012 EA4F 0483       LSL              R4,R3,#2    ;R4 = R3 * 4
   46 00000016 FBB0 F1F5       UDIV             R1,R0,R5    ; R1 = R0/10
   47 0000001A FB01 F105       MUL              R1,R1,R5    ; R1 = R1*10 (right
                                                            -most first digit i



ARM Macro Assembler    Page 2 


                                                            s 0)
   48 0000001E EBA0 0201       SUB              R2,R0,R1    ;R2 has remainder :
                                                             R2 = R0 - R1: R2 =
                                                             R0%10
   49 00000022 FBB1 F1F5       UDIV             R1,R1,R5    ; R1 = R1/10
   50 00000026 4608            MOV              R0,R1       ;R0 = R1
   51 00000028 F102 0230       ADD              R2,#48      ;add 48 to digit to
                                                             get ASCII char val
                                                            ue of digit
   52 0000002C F80D 2004       STRB             R2,[SP,R4]  ;store single digit
                                                             R2 in SP + R4 stac
                                                            k
   53 00000030         ;STRB R2,[SP,#num]
   54 00000030 F103 0301       ADD              R3,R3,#1
   55 00000034         ;STR R3,[SP,#n]  ;n = n + 1
   56 00000034 2B0A            CMP              R3,#10
   57 00000036 DBEC            BLT              loop1
   58 00000038         
   59 00000038 F04F 0600       MOV              R6,#0
   60 0000003C F04F 0700       MOV              R7,#0       ;R7 = 0, no non-zer
                                                            o integer reached y
                                                            et, keep checking f
                                                            or zeros
   61 00000040         ;R7 = 1, have reached non-zero integer, skip checking fo
                       r zeros
   62 00000040 F04F 0801       MOV              R8,#1       ;keep track of how 
                                                            many non-significan
                                                            t zeros there are i
                                                            n stack, 1 is defau
                                                            lt 
   63 00000044         
   64 00000044         ;loop2
   65 00000044         ;print out SIGNIFICANT digits only
   66 00000044         ;print out digits of input starting from leftmost signif
                       icant digit to right -->>>>
   67 00000044         loop2
   68 00000044         ;LDR R4,[SP,#num] ;R4 = n
   69 00000044         ;LSL R4,R4,#2  ;R4 = n*4
   70 00000044         ;LDRB R0,[SP,R4] ;R0 = [SP+(4*n)]
   71 00000044 F81D 0004       LDRB             R0,[SP,R4]  ;load single digit 
                                                            value from stack
   72 00000048 2C00            CMP              R4,#0       ;are you in first d
                                                            igit of stack? make
                                                             sure first digit a
                                                            lways printed out.
   73 0000004A D009            BEQ              no_check    ;if on first digit 
                                                            (last iteration), m
                                                            ake sure it's ALWAY
                                                            S printed out, even
                                                             if all 0's.
   74 0000004C 2F01            CMP              R7,#1
   75 0000004E D007            BEQ              no_check    ;move to no_check i
                                                            f non-zero int alre
                                                            ady encountered
   76 00000050 2830            CMP              R0,#48
   77 00000052 D103            BNE              not_zero    ;move to not_zero i
                                                            f non-zero int reac
                                                            hed 
   78 00000054 F108 0801       ADD              R8,R8,#1    ;increment R8 by 1,



ARM Macro Assembler    Page 3 


                                                             means non-sig zero
                                                             on SP
   79 00000058 F000 F804       BL               no_print    ;if on non-signific
                                                            ant zero value, do 
                                                            not print anything,
                                                             will print null sp
                                                            ace later.
   80 0000005C         not_zero
   81 0000005C F04F 0701       MOV              R7,#1
   82 00000060         no_check
   83 00000060 F7FF FFFE       BL               ST7735_OutChar
   84 00000064         no_print
   85 00000064 F1A4 0404       SUB              R4,R4,#4    ;decrement stack to
                                                             location of next v
                                                            alue
   86 00000068         ;STR R4,[SP,#num]  ;num = num - 4
   87 00000068 F106 0601       ADD              R6,R6,#1
   88 0000006C 2E0A            CMP              R6,#10
   89 0000006E DBE9            BLT              loop2
   90 00000070         
   91 00000070         ;null print will print AT LEAST one null space
   92 00000070         ;each non-significant zero from input means another null
                        space printed out
   93 00000070         null_print
   94 00000070 F04F 0000       MOV              R0,#0x00
   95 00000074 F7FF FFFE       BL               ST7735_OutChar
   96 00000078 F1B8 0801       SUBS             R8,R8,#1
   97 0000007C F1B8 0F00       CMP              R8,#0
   98 00000080 D8F6            BHI              null_print
   99 00000082         
  100 00000082 B00A            ADD              SP,SP,#40   ;reallocate stack
  101 00000084         
  102 00000084 E8BD 41F0       POP              {R4,R5,R6,R7,R8,LR}
  103 00000088 4770            BX               LR
  104 0000008A         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
  105 0000008A         
  106 0000008A         ; -----------------------LCD _OutFix--------------------
                       --
  107 0000008A         ; Output characters to LCD display in fixed-point format
                       
  108 0000008A         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
  109 0000008A         ; Inputs:  R0 is an unsigned 32-bit number
  110 0000008A         ; Outputs: none
  111 0000008A         ; E.g., R0=0,    then output "0.000 "
  112 0000008A         ;       R0=3,    then output "0.003 "
  113 0000008A         ;       R0=89,   then output "0.089 "
  114 0000008A         ;       R0=123,  then output "0.123 "
  115 0000008A         ;       R0=9999, then output "9.999 "
  116 0000008A         ;       R0>9999, then output "*.*** "
  117 0000008A         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  118 0000008A         LCD_OutFix
  119 0000008A         
  120 0000008A B570            PUSH             {R4,R5,R6,LR}
  121 0000008C         
  122 0000008C         ;ASCII values of * (42), . (46), 0 (48)
  123 0000008C F242 760F       MOV              R6,#9999
  124 00000090 42B0            CMP              R0,R6



ARM Macro Assembler    Page 4 


  125 00000092 D831            BHI              stars       ;is R0 > 9999? if s
                                                            o, skip stuff and g
                                                            o to 'done'. do not
                                                             ccllect $200.
  126 00000094         
  127 00000094 250A            MOVS             R5,#10
  128 00000096 B084            SUB              SP,SP,#16   ;SP = SP-16, alloca
                                                            te space for 4 valu
                                                            es on stack 
  129 00000098 2300            MOVS             R3,#0x00
  130 0000009A         
  131 0000009A         ;get first 4 digits of R0 and store in stack
  132 0000009A         loop3
  133 0000009A EA4F 0483       LSL              R4,R3,#2    ;R4 = R3 * 4
  134 0000009E FBB0 F1F5       UDIV             R1,R0,R5    ; R1 = R0/10
  135 000000A2 FB01 F105       MUL              R1,R1,R5    ; R1 = R1*10 (right
                                                            -most first digit i
                                                            s 0)
  136 000000A6 EBA0 0201       SUB              R2,R0,R1    ;R2 has remainder :
                                                             R2 = R0 - R1: R2 =
                                                             R0%10
  137 000000AA FBB1 F1F5       UDIV             R1,R1,R5    ; R1 = R1/10
  138 000000AE 4608            MOV              R0,R1       ;R0 = R1
  139 000000B0 3230            ADDS             R2,#48      ;add 48 to digit to
                                                             get ASCII char val
                                                            ue of digit
  140 000000B2 F84D 2004       STR              R2,[SP,R4]
  141 000000B6 F103 0301       ADD              R3,R3,#1
  142 000000BA 2B04            CMP              R3,#4
  143 000000BC DBED            BLT              loop3
  144 000000BE         
  145 000000BE         ;print out  4th, '.', 3rd, 2nd, 1st digits
  146 000000BE F81D 0004       LDRB             R0,[SP,R4]
  147 000000C2 F7FF FFFE       BL               ST7735_OutChar
  148 000000C6 F1A4 0404       SUB              R4,R4,#4
  149 000000CA         
  150 000000CA F04F 002E       MOV              R0,#0x2E
  151 000000CE F7FF FFFE       BL               ST7735_OutChar
  152 000000D2         
  153 000000D2 F81D 0004       LDRB             R0,[SP,R4]
  154 000000D6 F7FF FFFE       BL               ST7735_OutChar
  155 000000DA F1A4 0404       SUB              R4,R4,#4
  156 000000DE         
  157 000000DE F81D 0004       LDRB             R0,[SP,R4]
  158 000000E2 F7FF FFFE       BL               ST7735_OutChar
  159 000000E6 F1A4 0404       SUB              R4,R4,#4
  160 000000EA         
  161 000000EA F81D 0004       LDRB             R0,[SP,R4]
  162 000000EE F7FF FFFE       BL               ST7735_OutChar
  163 000000F2         
  164 000000F2 B004            ADD              SP,SP,#16   ;reallocate stack
  165 000000F4         
  166 000000F4 F000 F816       BL               done
  167 000000F8         
  168 000000F8         ;print out '*.****' if R0 > 9999.
  169 000000F8         stars
  170 000000F8 F04F 002A       MOV              R0,#0x2A
  171 000000FC F7FF FFFE       BL               ST7735_OutChar
  172 00000100 F04F 002E       MOV              R0,#0x2E



ARM Macro Assembler    Page 5 


  173 00000104 F7FF FFFE       BL               ST7735_OutChar
  174 00000108 F04F 002A       MOV              R0,#0x2A
  175 0000010C F7FF FFFE       BL               ST7735_OutChar
  176 00000110 F04F 002A       MOV              R0,#0x2A
  177 00000114 F7FF FFFE       BL               ST7735_OutChar
  178 00000118 F04F 002A       MOV              R0,#0x2A
  179 0000011C F7FF FFFE       BL               ST7735_OutChar
  180 00000120         
  181 00000120 F000 F800       BL               done
  182 00000124         
  183 00000124         done
  184 00000124         
  185 00000124         ;move to next line
  186 00000124 F04F 000A       MOV              R0,#0x0A
  187 00000128 F7FF FFFE       BL               ST7735_OutChar
  188 0000012C         
  189 0000012C E8BD 4070       POP              {R4,R5,R6,LR}
  190 00000130         
  191 00000130 4770            BX               LR
  192 00000132         
  193 00000132         
  194 00000132         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  195 00000132         
  196 00000132 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  197 00000134                 END                          ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__RTX SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 20 in file Print.s
   Uses
      None
Comment: .text unused
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 31 in file Print.s
   Uses
      At line 17 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 0000008A

Symbol: LCD_OutFix
   Definitions
      At line 118 in file Print.s
   Uses
      At line 18 in file Print.s
Comment: LCD_OutFix used once
done 00000124

Symbol: done
   Definitions
      At line 183 in file Print.s
   Uses
      At line 166 in file Print.s
      At line 181 in file Print.s

loop1 00000012

Symbol: loop1
   Definitions
      At line 43 in file Print.s
   Uses
      At line 57 in file Print.s
Comment: loop1 used once
loop2 00000044

Symbol: loop2
   Definitions
      At line 67 in file Print.s
   Uses
      At line 89 in file Print.s
Comment: loop2 used once
loop3 0000009A

Symbol: loop3
   Definitions
      At line 132 in file Print.s
   Uses
      At line 143 in file Print.s
Comment: loop3 used once
no_check 00000060




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: no_check
   Definitions
      At line 82 in file Print.s
   Uses
      At line 73 in file Print.s
      At line 75 in file Print.s

no_print 00000064

Symbol: no_print
   Definitions
      At line 84 in file Print.s
   Uses
      At line 79 in file Print.s
Comment: no_print used once
not_zero 0000005C

Symbol: not_zero
   Definitions
      At line 80 in file Print.s
   Uses
      At line 77 in file Print.s
Comment: not_zero used once
null_print 00000070

Symbol: null_print
   Definitions
      At line 93 in file Print.s
   Uses
      At line 98 in file Print.s
Comment: null_print used once
stars 000000F8

Symbol: stars
   Definitions
      At line 169 in file Print.s
   Uses
      At line 125 in file Print.s
Comment: stars used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

num 00000000

Symbol: num
   Definitions
      At line 12 in file Print.s
   Uses
      At line 38 in file Print.s
Comment: num used once
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 15 in file Print.s
   Uses
      At line 83 in file Print.s
      At line 95 in file Print.s
      At line 147 in file Print.s
      At line 151 in file Print.s
      At line 154 in file Print.s
      At line 158 in file Print.s
      At line 162 in file Print.s
      At line 171 in file Print.s
      At line 173 in file Print.s
      At line 175 in file Print.s
      At line 177 in file Print.s
      At line 179 in file Print.s
      At line 187 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 16 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
346 symbols in table
